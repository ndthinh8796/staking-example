/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenFarmInterface extends utils.Interface {
  contractName: "TokenFarm";
  functions: {
    "addAllowedToken(address)": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "getTokenValue(address)": FunctionFragment;
    "getUserSingleTokenValue(address,address)": FunctionFragment;
    "getUserTotalStakedValue(address)": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "issueTokensReward()": FunctionFragment;
    "ndtToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPriceFeedContract(address,address)": FunctionFragment;
    "stakeTokens(uint256,address)": FunctionFragment;
    "stakers(uint256)": FunctionFragment;
    "stakingBalance(address,address)": FunctionFragment;
    "tokenPriceFeedMapping(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStakeToken(address)": FunctionFragment;
    "uniqueTokenStaked(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAllowedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSingleTokenValue",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalStakedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokensReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ndtToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceFeedMapping",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStakeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueTokenStaked",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSingleTokenValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalStakedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokensReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ndtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceFeedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueTokenStaked",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenFarm extends BaseContract {
  contractName: "TokenFarm";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAllowedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenValue(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUserSingleTokenValue(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTotalStakedValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueTokensReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ndtToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedContract(
      _token: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    stakingBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenPriceFeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStakeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniqueTokenStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addAllowedToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokenValue(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getUserSingleTokenValue(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalStakedValue(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

  issueTokensReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ndtToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedContract(
    _token: string,
    _priceFeed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTokens(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakingBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenPriceFeedMapping(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStakeToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniqueTokenStaked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addAllowedToken(_token: string, overrides?: CallOverrides): Promise<void>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenValue(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUserSingleTokenValue(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalStakedValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

    issueTokensReward(overrides?: CallOverrides): Promise<void>;

    ndtToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPriceFeedContract(
      _token: string,
      _priceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    stakingBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceFeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStakeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    uniqueTokenStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addAllowedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenValue(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSingleTokenValue(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalStakedValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueTokensReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ndtToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeedContract(
      _token: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakingBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceFeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStakeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniqueTokenStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenValue(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSingleTokenValue(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalStakedValue(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueTokensReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ndtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedContract(
      _token: string,
      _priceFeed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPriceFeedMapping(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStakeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniqueTokenStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
